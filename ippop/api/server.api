// server.api
type (
	NodeWSReq {
		NodeId  string `form:"id"`
		OS      string `form:"os"`
		Version string `form:"version,optional"`
	}
	WebWSReq {
		NodeId string `form:"id"`
		OS     string `form:"os"`
	}
	DeleteUserCache {
		UserName string `json:"user_name"`
	}
	ServerInfo {
		Socks5Addr   string `json:"socks5_addr"`
		WSServerURL  string `json:"ws_server_url"`
		AccessSecret string `json:"access_secret"`
		AccessExpire int64  `json:"access_expire"`
	}
	AccessTokenReq {
		NodeId string `form:"nodeid"`
	}
	AccessTokenResp {
		Token string `json:"token"`
	}
	GetNodePopReq {
		NodeId string `form:"nodeid"`
	}
	GetNodePopResp {
		ServerURL   string `json:"server_url"`
		AccessToken string `json:"access_token"`
	}
	AddBlackListReq {
		NodeID string `json:"node_id"`
	}
	GetBlackListResp {
		Nodes []string `json:"nodes"`
	}
	RemoveBlackListReq {
		NodeID string `json:"node_id"`
	}
	KickNodeReq {
		NodeID string `form:"nodeid"`
	}
)

@server (
	middleware: JwtMiddleware // Enable jwt authentication
)
service server-api {
	@handler nodeWS
	get /ws/node

	@handler deleteUserCache
	post /user/cache/delete (DeleteUserCache)

	@handler getServerInfo
	get /server/info returns (ServerInfo)

	@handler getNodeAccessToken
	get /node/access/token (AccessTokenReq) returns (AccessTokenResp)

	@handler addBlackList
	post /node/blacklist/add (AddBlackListReq)

	@handler removeBlackList
	post /node/blacklist/remove (RemoveBlackListReq)

	@handler KickNode
	post /node/kick (KickNodeReq)
}

// TODO: will remove next version
service server-api {
	@handler getNodePop
	get /node/pop (GetNodePopReq) returns (GetNodePopResp)
}

